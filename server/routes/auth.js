const express = require('express');

const bcrypt = require('bcryptjs');
//—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π

const db = require('../db');

const router = express.Router();
//–æ–±—å–µ–∫—Ç –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤

router.post('/register', (req, res) => {
const { login, password, full_name, phone, email } = req.body;

if (!login || !password || !full_name || !phone || !email) {
return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
    }



let roleId = 1;
if (login === `sklad` && password === `123qwe`){
    roleId = 2;
}



const sql = 'INSERT INTO user (login, password, full_name, phone, email, id_role) VALUES (?, ?, ?, ?, ?, ?)';
const values = [login, password, full_name, phone, email, roleId];
//sql –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–¥

db.query(sql, values, (err, result) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }

const who = roleId === 2 ? '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    res.status(200).json({ message: `–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ (${who})` });
});


});
module.exports = router;

router.post('/login', (req, res) => {
  const { login, password } = req.body;

  if (!login || !password) {
    return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
  }

  const sql = 'SELECT * FROM user WHERE login = ?';
  db.query(sql, [login], (err, results) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    if (results.length === 0) return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    const user = results[0];

    // üëâ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (–µ—Å–ª–∏ bcrypt –æ—Ç–∫–ª—é—á—ë–Ω)
    if (password !== user.password) {
      return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }

    return res.status(200).json({
      message: '–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      user: {
        id: user.id,
        login: user.login,
        role: user.id_role
      }
    });
  });
});
